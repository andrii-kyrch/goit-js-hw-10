{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst refs = {\n  inputDate: document.querySelector('#datetime-picker'),\n  startButton: document.querySelector('[data-start]'),\n  timerDays: document.querySelector('[data-days]'),\n  timerHours: document.querySelector('[data-hours]'),\n  timerMinutes: document.querySelector('[data-minutes]'),\n  timerSeconds: document.querySelector('[data-seconds]'),\n};\n\nrefs.startButton.disabled = true;\n\nlet userSelectedDate;\n\nflatpickr('#datetime-picker', {\n  defaultDate: new Date(),\n  enableTime: true,\n  time_24hr: true,\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (selectedDates[0] <= Date.now()) {\n      iziToast.error({\n        message: 'Please choose a date in the future',\n        position: 'topRight',\n        closeOnEscape: true,\n        closeOnClick: true,\n      });\n      refs.startButton.disabled = true;\n    } else {\n      userSelectedDate = selectedDates[0];\n      refs.startButton.disabled = false;\n    }\n  },\n});\n\nrefs.startButton.addEventListener('click', () => {\n  refs.startButton.disabled = true;\n  refs.inputDate.disabled = true;\n  const timerId = setInterval(() => {\n    const currentTime = Date.now();\n    const deltaTime = userSelectedDate - currentTime;\n\n    if (deltaTime < 1000) {\n      refs.inputDate.disabled = false;\n      clearInterval(timerId);\n    }\n\n    const time = convertMs(deltaTime);\n    updateTimerFace(time);\n  }, 1000);\n});\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction updateTimerFace({ days, hours, minutes, seconds }) {\n  refs.timerDays.textContent = addLeadingZero(days);\n  refs.timerHours.textContent = addLeadingZero(hours);\n  refs.timerMinutes.textContent = addLeadingZero(minutes);\n  refs.timerSeconds.textContent = addLeadingZero(seconds);\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n"],"names":["refs","userSelectedDate","flatpickr","selectedDates","iziToast","timerId","currentTime","deltaTime","time","convertMs","updateTimerFace","ms","days","hours","minutes","seconds","addLeadingZero","value"],"mappings":"+IAKA,MAAMA,EAAO,CACX,UAAW,SAAS,cAAc,kBAAkB,EACpD,YAAa,SAAS,cAAc,cAAc,EAClD,UAAW,SAAS,cAAc,aAAa,EAC/C,WAAY,SAAS,cAAc,cAAc,EACjD,aAAc,SAAS,cAAc,gBAAgB,EACrD,aAAc,SAAS,cAAc,gBAAgB,CACvD,EAEAA,EAAK,YAAY,SAAW,GAE5B,IAAIC,EAEJC,EAAU,mBAAoB,CAC5B,YAAa,IAAI,KACjB,WAAY,GACZ,UAAW,GACX,gBAAiB,EACjB,QAAQC,EAAe,CACjBA,EAAc,CAAC,GAAK,KAAK,IAAG,GAC9BC,EAAS,MAAM,CACb,QAAS,qCACT,SAAU,WACV,cAAe,GACf,aAAc,EACtB,CAAO,EACDJ,EAAK,YAAY,SAAW,KAE5BC,EAAmBE,EAAc,CAAC,EAClCH,EAAK,YAAY,SAAW,GAE/B,CACH,CAAC,EAEDA,EAAK,YAAY,iBAAiB,QAAS,IAAM,CAC/CA,EAAK,YAAY,SAAW,GAC5BA,EAAK,UAAU,SAAW,GAC1B,MAAMK,EAAU,YAAY,IAAM,CAChC,MAAMC,EAAc,KAAK,MACnBC,EAAYN,EAAmBK,EAEjCC,EAAY,MACdP,EAAK,UAAU,SAAW,GAC1B,cAAcK,CAAO,GAGvB,MAAMG,EAAOC,EAAUF,CAAS,EAChCG,EAAgBF,CAAI,CACrB,EAAE,GAAI,CACT,CAAC,EAED,SAASC,EAAUE,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASL,EAAgB,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CAC1Df,EAAK,UAAU,YAAcgB,EAAeJ,CAAI,EAChDZ,EAAK,WAAW,YAAcgB,EAAeH,CAAK,EAClDb,EAAK,aAAa,YAAcgB,EAAeF,CAAO,EACtDd,EAAK,aAAa,YAAcgB,EAAeD,CAAO,CACxD,CAEA,SAASC,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC"}